use std::collections::vec_deque::Iter;

struct Solution;

fn main() {
    println!("Hello, world!");
    println!(
        "{}",
        Solution::is_valid_sudoku(vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
        ])
    );

    println!(
        "{}",
        Solution::is_valid_sudoku(vec![
            vec!['8', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
        ])
    );

    println!(
        "{}",
        Solution::is_valid_sudoku(vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '5'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '.'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
        ])
    );

    println!(
        "{}",
        Solution::is_valid_sudoku(vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '9'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '.'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
        ])
    );
}

// --

impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        // check rows
        for i in board.iter() {
            let mut map = [0; 9];

            for &value in i.iter() {
                if value != '.' {
                    map[(value as u8 - '1' as u8) as usize] += 1;
                }
            }

            if map.iter().any(|e| *e > 1) {
                return false;
            }
        }

        for i in 0..9 {
            let mut map = [0; 9];

            for row in board.iter() {
                let value = row[i];

                if value != '.' {
                    map[(value as u8 - '1' as u8) as usize] += 1;
                }
            }

            if map.iter().any(|e| *e > 1) {
                return false;
            }
        }

        for i in 0..3 {
            for j in 0..3 {
                let mut map = [0; 9];

                for k in 0..3 {
                    for l in 0..3 {
                        let value = board[i * 3 + k][j * 3 + l];

                        if value != '.' {
                            map[(value as u8 - '1' as u8) as usize] += 1;
                        }
                    }
                }

                if map.iter().any(|e| *e > 1) {
                    return false;
                }
            }
        }

        true
    }
}
